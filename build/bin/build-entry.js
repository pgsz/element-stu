/**
 * 生成 /src/index.js，解析 json 文件和字符串模板库来自动生成
 *   1、自动导入组件库所有组件
 *   2、定义全量注册组件库的 install 方法
 *   3、导出版本、install、各个组件
*/
// json 文件：key：包名，value：路径
var Components = require('../../components.json');
var fs = require('fs');
// 字符串模板库
var render = require('json-templater/string');
// 负责将 连字符 comp-name 形式的字符串转换为 大驼峰 CompName
var uppercamelcase = require('uppercamelcase');
var path = require('path');
// 操作系统特定的行尾标记  windows: \r\n
var endOfLine = require('os').EOL;

// 输出路径 /src/index.js
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
// 导入模板  name：大驼峰  package：连字符
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
// 'CompName'
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// /src/index.js 的模板
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'element-ui/src/locale';
import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  Vue.use(InfiniteScroll);
  Vue.use(Loading.directive);

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`;

delete Components.font;

// 获取所有的包名
var ComponentNames = Object.keys(Components);

// 存放所有的 import 语句
var includeComponentTemplate = [];
// components 数组
var installTemplate = [];
// export 导出的数组 模板中的 list
var listTemplate = [];

// 遍历所有的包名
ComponentNames.forEach(name => {
  // 将连字符格式的包名转换成大驼峰形式，就是组件名，比如 form-item => FormItem
  var componentName = uppercamelcase(name);

  // 替换导入语句中的模板变量，生成导入语句， import FormItem from '../packages/form-item/index.js'
  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  // 这些组件从 components 数组中剔除，不需要全局注册，采用挂载到原型链的方式，在模板字符串的 install 中
  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name  // 此参数并没有使用
    }));
  }

  // 将所有的组件放到 listTemplate 中  [ 'FormItem', ... ]
  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);

});

// 替换么办中的四个变量
var template = render(MAIN_TEMPLATE, {
  // import
  include: includeComponentTemplate.join(endOfLine),
  // components
  install: installTemplate.join(',' + endOfLine),
  // 版本号
  version: process.env.VERSION || require('../../package.json').version,
  // 导出的组件列表
  list: listTemplate.join(',' + endOfLine)
});

// 将就绪的模板写入 src/index.js
fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

